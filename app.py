import subprocess
import sys
import gradio as gr
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch

# ========================
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# ========================
try:
    import transformers
except ImportError:
    print("Installing transformers...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "transformers"])

try:
    import gradio
except ImportError:
    print("Installing gradio...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "gradio"])

# ========================
# –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ò
# ========================
MODEL_PATH = "./model"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∏ –º–æ–¥–µ–ª—å
tokenizer = AutoTokenizer.from_pretrained(MODEL_PATH)
model = AutoModelForSequenceClassification.from_pretrained(MODEL_PATH)
model.eval()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
categories = [
    '–±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
    '–æ–±—É–≤—å',
    '–æ–¥–µ–∂–¥–∞',
    '–ø–æ—Å—É–¥–∞',
    '—Ç–µ–∫—Å—Ç–∏–ª—å',
    '—Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π',
    '—É–∫—Ä–∞—à–µ–Ω–∏—è –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
    '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
    '–Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞'
]

# ========================
# –§–£–ù–ö–¶–ò–Ø –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø
# ========================
def predict_review(text):
    if not text.strip():
        return "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞", ""

    inputs = tokenizer(
        text,
        truncation=True,
        padding=True,
        max_length=512,
        return_tensors="pt"
    )

    with torch.no_grad():
        outputs = model(**inputs)
        probs = torch.nn.functional.softmax(outputs.logits, dim=-1)
        pred_class = torch.argmax(probs, dim=-1).item()
        confidence = probs[0][pred_class].item()

    predicted_category = categories[pred_class]
    confidence_percent = round(confidence * 100, 2)

    result_text = f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{predicted_category}**\n" \
                  f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: **{confidence_percent}%**"

    return result_text, predicted_category

# ========================
# GRADIO –ò–ù–¢–ï–†–§–ï–ô–°
# ========================
with gr.Blocks(
    title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ ‚Äî T-–ë–∞–Ω–∫",
    theme=gr.themes.Soft(primary_hue="blue", secondary_hue="indigo"),
    css="""
    .gradio-container { background: linear-gradient(135deg, #f5f7fa, #e4e8eb); }
    h1 { text-align: center; color: #2c3e50; font-weight: 700; }
    .footer { text-align: center; margin-top: 20px; color: #7f8c8d; font-size: 0.9em; }
    """
) as demo:
    gr.Markdown("# üß† –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç T-–ë–∞–Ω–∫")
    gr.Markdown("### –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –æ—Ç–∑—ã–≤–∞")

    with gr.Row():
        with gr.Column(scale=2):
            review_input = gr.Textbox(
                label="üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–û—Ç–ª–∏—á–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏, –∑–≤—É–∫ —á–∏—Å—Ç—ã–π'",
                lines=5
            )
            examples = gr.Examples(
                examples=[
                    ["–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –ø—ã–ª–µ—Å–æ—Å, —Ç–∏—Ö–∏–π –∏ –º–æ—â–Ω—ã–π!"],
                    ["–ö—Ä–æ—Å—Å–æ–≤–∫–∏ –∂–º—É—Ç, –Ω–æ –≤—ã–≥–ª—è–¥—è—Ç —Å—Ç–∏–ª—å–Ω–æ"],
                    ["–ü–ª–∞—Ç—å–µ —Å–µ–ª–æ –∏–¥–µ–∞–ª—å–Ω–æ, —Ç–∫–∞–Ω—å –ø—Ä–∏—è—Ç–Ω–∞—è"],
                    ["–°–∫–æ–≤–æ—Ä–æ–¥–∞ –ø—Ä–∏–≥–æ—Ä–∞–µ—Ç, –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é"],
                    ["–ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏—à–µ–ª, –¥–µ–Ω—å–≥–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª–∏"]
                ],
                inputs=review_input,
                label="–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤"
            )
            classify_btn = gr.Button("üöÄ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", variant="primary")

        with gr.Column(scale=1):
            result_output = gr.Textbox(label="üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç", interactive=False)
            category_output = gr.Label(label="üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Ç–æ–ø-3)")

    classify_btn.click(
        fn=predict_review,
        inputs=review_input,
        outputs=[result_output, category_output]
    )

    gr.Markdown(
        """
        <div class="footer">
        –ü—Ä–æ–µ–∫—Ç Sirius NLP Case ‚Äî Matvey Tizhin | T-–ë–∞–Ω–∫ 2025
        </div>
        """,
        elem_classes=["footer"]
    )

if __name__ == "__main__":
    demo.launch()
